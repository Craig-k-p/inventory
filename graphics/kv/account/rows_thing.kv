# See rows_container.kv for a similar layout with more detailed notes

<ThingHeadingRow>:
    # Heading row to label each column
    # Future:
    #    Tag field - dropdown of popular tags typed by user with the option to add one
    rows: 1
    id: heading_row
    # Link the ids to the kv_datagrid.py
    obj_label: obj_label
    weight_label: weight_label
    val_label: val_label
    tag_label: tag_label

    # Object heading
    AnchorLayout:
        canvas:
            Color:
                rgba: app.kv_settings['row heading color']
            Rectangle:
                pos: self.pos
                size: self.size
        Label:
            id: obj_label
            text: 'Things'
            bold: True
            color: app.kv_settings['row heading text color']
            # Allow parent layout to modify the x position of Label
            size_hint: (None, 1)
            size: (self.texture_size[0]+10, self.texture_size[1])

    # Weight heading
    AnchorLayout:
        # label: label
        width: self.parent.weight_col_width
        anchor_x: 'center'
        size_hint: (None, 1)  # Allows setting the width of layout
        canvas:
            Color:
                rgba: app.kv_settings['row heading color']
            Rectangle:
                pos: self.pos
                size: self.size
        Label:
            id: weight_label
            width: app.kv_settings['overview weight field width']
            text: 'LBs'
            bold: True
            size_hint: (None, 1)
            size: (self.texture_size[0]+10, self.texture_size[1])
            color: app.kv_settings['row heading text color']

    # Value heading
    AnchorLayout:
        width: self.parent.val_col_width
        anchor_x: 'center'
        size_hint: (None, 1)  # Allows setting the width of layout
        canvas:
            Color:
                rgba: app.kv_settings['row heading color']
            Rectangle:
                pos: self.pos
                size: self.size
        Label:
            id: val_label
            text: '$'
            bold: True
            size_hint: (None, 1)
            size: (self.texture_size[0]+10, self.texture_size[1])
            color: app.kv_settings['row heading text color']

    # Tag heading
    FloatLayout:
        width: 40
        # Setting size_hint: (x=None, y) allows me to manually size the width of the Layout to 40
        size_hint: (None, 1)
        canvas:
            Color:
                rgba: app.kv_settings['row heading color']
            Rectangle:
                pos: self.pos
                size: self.size
        Label:
            id: tag_label
            bold: True
            text: 'Tags'
            pos_hint: {'x': 0, 'y': 0}
            color: app.kv_settings['row heading text color']




<ThingDataRow>:
    # Future:
    #   Location field should be a dropdown of all locations typed by user with the option to add one
    #   Tag field should be a dropdown of all locations typed by user with the option to add one
    id: data_row
    rows: 1
    fields: [_thing_field, weight_lo, val_lo]
    obj_label: obj_label
    weight_label: weight_label
    val_lo: val_lo
    val_label: val_label
    tag_button: tag_button

    # Thing field
    AnchorLayout:
        id: _thing_field
        anchor_x: 'left'
        anchor_y: 'center'  # Has no effect if size_hint_y is 1
        size_hint: (1, 1)
        canvas:
            Color:
                rgba: app.kv_settings['row selected color'] if data_row.selected else app.kv_settings['row color']
            Rectangle:
                pos: self.pos
                size: self.size
        Label:
            id: obj_label
            color: app.kv_settings['text color']
            size_hint: (None, 1)
            size: (self.texture_size[0]+10, self.texture_size[1])

    # Weight field
    AnchorLayout:
        id: weight_lo
        width: self.parent.weight_col_width
        anchor_x: 'right'
        size_hint: (None, 1)  # Allows setting the width of layout
        canvas:
            Color:
                rgba: app.kv_settings['row selected color'] if data_row.selected else app.kv_settings['row color']
            Rectangle:
                pos: self.pos
                size: self.size
        Label:
            id: weight_label
            size_hint: (None, 1)
            size: (self.texture_size[0]+10, self.texture_size[1])

    # Value field
    AnchorLayout:
        id: val_lo
        width: self.parent.val_col_width
        anchor_x: 'right'
        size_hint: (None, 1)  # Allows setting the width of layout
        canvas:
            Color:
                rgba: app.kv_settings['row selected color'] if data_row.selected else app.kv_settings['row color']
            Rectangle:
                pos: self.pos
                size: self.size
        Label:
            id: val_label
            size_hint: (None, 1)
            size: (self.texture_size[0]+10, self.texture_size[1])

    # Tag button
    FloatLayout:
        width: 40
        size_hint: (None, 1)
        canvas:
            Color:
                rgba: app.kv_settings['row selected color'] if data_row.selected else app.kv_settings['row color']
            Rectangle:
                pos: self.pos
                size: self.size
        Button:
            id: tag_button
            text: str(data_row.object.ID)
            pos_hint: {'x': 0, 'y': 0}
            on_press:
                data_row.parent.deleteObject(data_row.ID)
